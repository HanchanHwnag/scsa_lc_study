#include <stdio.h>
#include <string>
#include <vector>
#include <set>

// Runtime: 32 ms, faster than 95.09% of C++ online submissions for Median of Two Sorted Arrays.
// Memory Usage: 89.2 MB, less than 87.05% of C++ online submissions for Median of Two Sorted Arrays.
// O(log(n+m)) 성공은 했지만 size()하는게 O(n+m)인거 아닌가;; ㅠㅠ 그래서 성능은 그닥
// multiset 삭제, size 횟수 줄이면 개선될까?

using namespace std;

class Solution {
public:

    double centerAvg(int a, int b, int c, int d) {
        int arr[4] = {a, b, c, d};
        for (int i = 0; i < 3; i++){
            for (int j = i + 1; j < 4; j++){
                if (arr[i] < arr[j]){
                    int temp = arr[i];
                    arr[i] = arr[j];
                    arr[j] = temp;
                }
            }
        }
        return (arr[1] + arr[2]) / 2.0;
    }
    double topSecond(int a, int b, int c) {
        int arr[3] = {a, b, c};
        for (int i = 0; i < 2; i++){
            for (int j = i + 1; j < 3; j++){
                if (arr[i] < arr[j]){
                    int temp = arr[i];
                    arr[i] = arr[j];
                    arr[j] = temp;
                }
            }
        }
        return arr[1];
    }

    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        bool is_odd = true;
        int len_nums1 = nums1.size();
        int len_nums2 = nums2.size();
        is_odd = (len_nums1 + len_nums2) % 2;
        if (len_nums1 == 0 && len_nums2 == 1)
            return nums2[0];
        else if (len_nums1 == 1 && len_nums2 == 0)
            return nums1[0];
        else if (len_nums1 == 0) {
            nums1.push_back(nums2[len_nums2 - 1]);
            nums2.pop_back();
            len_nums1++;
            len_nums2--;
        }
        else if (len_nums2 == 0) {
            nums2.push_back(nums1[len_nums1 - 1]);
            nums1.pop_back();
            len_nums2++;
            len_nums1--;
        }

        vector<int>* num1 = &nums1;
        vector<int>* num2 = &nums2;

        if (len_nums1 < len_nums2){
            int temp = len_nums1;
            len_nums1 = len_nums2;
            len_nums2 = temp;
            num1 = &nums2;
            num2 = &nums1;
        }

        int num1_index = (len_nums1 + len_nums2 - 1) / 2;
        int num2_index = 0;
        int start = (num1_index - len_nums2 + 1) > 0 ? (num1_index - len_nums2 + 1) : 0;
        int end = num1_index - 1;


        while (start <= end) {
            if ((*num1)[num1_index] < (*num2)[num2_index])
                start = num1_index + 1;
            else if ((*num1)[num1_index] > (*num2)[num2_index])
                end = num1_index - 1;
            else
                return (*num1)[num1_index];

            if (start <= end) {
                num2_index += num1_index - (start + end) / 2;
                num1_index = (start + end) / 2;
            }

        }
        if (is_odd) {
            if ((*num1)[num1_index] > (*num2)[num2_index]) {
                return topSecond((*num1)[num1_index], (*num2)[num2_index], num1_index == 0 ? -10000000 : (*num1)[num1_index - 1]);
            }
            else {
                return topSecond((*num1)[num1_index], (*num2)[num2_index], num2_index == 0 ? -10000000 : (*num2)[num2_index - 1]);
            }
        }
        else {
            if ((*num1)[num1_index] > (*num2)[num2_index]) {
                return centerAvg((*num1)[num1_index], (*num2)[num2_index], num1_index == 0 ? -10000000 : (*num1)[num1_index - 1], num2_index == (*num2).size() - 1 ? 10000000 : (*num2)[num2_index + 1]);
            }
            else {
                return centerAvg((*num1)[num1_index], (*num2)[num2_index], num2_index == 0 ? -10000000 : (*num2)[num2_index - 1], num1_index == (*num1).size() - 1 ? 10000000 : (*num1)[num1_index + 1]);

            }
        }
    }
};

int main() {
	
    vector<int> a;
    vector<int> b;
    a.push_back(1);
    a.push_back(2);
    //a.push_back(4);
    //a.push_back(4);

    //b.push_back(2);
    b.push_back(3);
    b.push_back(4);
    b.push_back(5);

    Solution sol;
    printf("%f\n",sol.findMedianSortedArrays(a, b));
	return 0;
}

