#include <stdio.h>
#include <string>
#include <vector>
#include <set>

// O(log(n+m)) 시도 하다 실패... 얼추 되는거같은데 다음에 더 생각해봐야겠다.

using namespace std;

class Solution {
public:

    double max(int a, int b) {
        return a > b ? a : b;
    }
    double min(int a, int b) {
        return a > b ? b : a;
    }
    double centerAvg(int a, int b, int c, int d) {
		multiset<int> st;
		st.insert(a);
		st.insert(b);
		st.insert(c);
        st.insert(d);
        int count = 0;
        double ret = 0;
        for (int value : st) {
            if (count == 1 || count == 2)
                ret += value;
            count++;
        }
        return ret / 2;
    }

    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        bool is_odd = true;
        int len_nums1 = nums1.size();
        int len_nums2 = nums2.size();
        is_odd = (len_nums1 + len_nums2) % 2;
        if (len_nums1 == 0 && len_nums2 == 1)
            return nums2[0];
        else if (len_nums1 == 1 && len_nums2 == 0)
            return nums1[0];
        else if (len_nums1 == 0) {
            nums1.push_back(nums2[len_nums2 - 1]);
            nums2.pop_back();
            len_nums1++;
            len_nums2--;
        }
        else if (len_nums2 == 0) {
            nums2.push_back(nums1[len_nums1 - 1]);
            nums1.pop_back();
            len_nums2++;
            len_nums1--;
        }
       
        vector<int> num1 = len_nums1 > len_nums2 ? nums1 : nums2;
        vector<int> num2 = len_nums1 > len_nums2 ? nums2 : nums1;


        int start = 0;
        int end = len_nums1 + len_nums2 - 1;
        bool is_first = false;
        int num1_index = (start + end) / 2;
        int num2_index = 0;

        while (start <= end) {
            if (is_first == false) {
                if (num1[num1_index] <= num2[num2_index]) {
                    if (is_odd)
                        return num1[num1_index];
                    else {
                        if (num1_index == num1.size() - 1) {
                            return (num1[num1_index] + num2[num2_index]) / 2.0;
                        }
                        else {
                            return (num1[num1_index] + min(num1[num1_index + 1], num2[num2_index])) / 2.0;
                        }
                    }    
                }   
                else {
                    int origin_len = num1_index - (num1_index - 1 + start) / 2;
                    int len2 = num2.size() - 1;
                    int min = origin_len > len2 ? len2 : origin_len;
                    end = num1_index - 1;
                    start = num1_index - min;
                    num1_index -= min;
                    num2_index += min;

                }
                is_first = true;
            }
            else {
                if (num1[num1_index] < num2[num2_index])
                    start = num1_index + 1;
                else if (num1[num1_index] > num2[num2_index])
                    end = num1_index - 1;
                else
                    return num1[num1_index];
                if (start <= end) {
                    num2_index += num1_index - (start + end) / 2;
                    num1_index = (start + end) / 2;
                }
            }
        }
        if ((len_nums1 + len_nums2) % 2 == 1) {
            if (num1[num1_index] > num2[num2_index]) {
                if (num1_index - 1 < 0) return num2[num2_index];
                else return max(num2[num2_index], num1[num1_index - 1]);
            }
            else {
                if (num2_index - 1 < 0) return num1[num1_index];
                else return max(num1[num1_index], num2[num2_index - 1]);
            }
        }
        else {
            if (num1[num1_index] > num2[num2_index]) {
                return centerAvg(num1[num1_index], num2[num2_index], num1_index == 0 ? -10000000 : num1[num1_index - 1], num2_index == num2.size() - 1 ? 10000000 : num2[num2_index + 1]);
            }
            else {
                return centerAvg(num1[num1_index], num2[num2_index], num2_index == 0 ? -10000000 : num2[num2_index - 1], num1_index == num1.size() - 1 ? 10000000 : num1[num1_index + 1]);

            }
        }
    }
};

int main() {
	
    vector<int> a;
    vector<int> b;
    a.push_back(1);
    a.push_back(2);
    //a.push_back(4);
    //a.push_back(4);

    //b.push_back(2);
    b.push_back(3);
    b.push_back(4);
    b.push_back(5);

    Solution sol;
    printf("%f\n",sol.findMedianSortedArrays(a, b));
	return 0;
}

